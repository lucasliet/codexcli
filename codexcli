#!/usr/bin/env bash
# Usage:
#   codexcli [YOUR_INPUT]
# Example:
#   codexcli "olá como vai?"
#   codexcli ola como vai

CODEXCLI_ACCESS_TOKEN=$(jq -r '.tokens.access_token' ~/.codex/auth.json)
CODEXCLI_ACCOUNT_ID=$(jq -r '.tokens.account_id' ~/.codex/auth.json)
CODEXCLI_SESSION_ID="${SESSION_ID:-$(uuidgen | tr '[:upper:]' '[:lower:]')}"
CODEXCLI_MODEL="gpt-5"

if [ -z "${CODEXCLI_ACCESS_TOKEN:-}" ] || [ "$CODEXCLI_ACCESS_TOKEN" = "null" ]; then
echo "ACCESS_TOKEN não encontrado em ~/.codex/auth.json. Rode 'codex login' antes."; exit 1
fi
if [ -z "${CODEXCLI_ACCOUNT_ID:-}" ] || [ "$CODEXCLI_ACCOUNT_ID" = "null" ]; then
echo "ACCOUNT_ID não encontrado no auth.json. Tente relogar com 'codex login'."; exit 1
fi

# Carrega as mesmas instruções usadas pelo Codex CLI a partir do repositório oficial (sempre atualizado)
codexcli_now_ts() { date +%s; }
codexcli_is_stale() { f="$1"; t="${2:-${CODEX_INSTRUCTIONS_TTL:-86400}}"; [ ! -f "$f" ] && return 0; mt=$(stat -f %m "$f" 2>/dev/null || stat -c %Y "$f" 2>/dev/null || echo 0); [ $(( $(codexcli_now_ts) - mt )) -ge "$t" ]; }

CODEXCLI_VENDOR_DIR=""
if [ -d "$HOME/.local/share/codexcli/vendor/openai-codex" ]; then
  CODEXCLI_VENDOR_DIR="$HOME/.local/share/codexcli/vendor/openai-codex"
elif [ -d "vendor/openai-codex" ]; then
  CODEXCLI_VENDOR_DIR="vendor/openai-codex"
elif [ -d "$HOME/Projetos/codex" ]; then
  CODEXCLI_VENDOR_DIR="$HOME/Projetos/codex"
fi

codexcli_maybe_update_submodule() {
  CODEXCLI_STAMP="$HOME/.local/share/codexcli/.submodule.updated"
  if [ -d "$HOME/.local/share/codexcli/vendor/openai-codex/.git" ] && command -v git >/dev/null 2>&1; then
    if codexcli_is_stale "$CODEXCLI_STAMP"; then
      if git -C "$HOME/.local/share/codexcli/vendor/openai-codex" fetch -q origin && git -C "$HOME/.local/share/codexcli/vendor/openai-codex" checkout -q main && git -C "$HOME/.local/share/codexcli/vendor/openai-codex" pull -q --ff-only; then
        date +%s > "$CODEXCLI_STAMP" 2>/dev/null || true
      fi
    fi
  fi
}

codexcli_maybe_update_submodule

if [ -f "$CODEXCLI_VENDOR_DIR/codex-rs/core/prompt.md" ] && [ -f "$CODEXCLI_VENDOR_DIR/codex-rs/apply-patch/apply_patch_tool_instructions.md" ]; then
  CODEXCLI_INSTRUCTIONS="$(cat "$CODEXCLI_VENDOR_DIR/codex-rs/core/prompt.md"; printf '\n'; cat "$CODEXCLI_VENDOR_DIR/codex-rs/apply-patch/apply_patch_tool_instructions.md")"
else
  echo "Falha ao localizar os arquivos no submódulo do Codex. Verifique a instalação." >&2
  exit 1
fi

# Monta o payload exatamente como o CLI faz para gpt-5
CODEXCLI_INPUT="$@"

CODEXCLI_DATA="$(jq -n --arg model "$CODEXCLI_MODEL" \
--arg instructions "$CODEXCLI_INSTRUCTIONS" \
--arg text "$CODEXCLI_INPUT" \
'{
    model: $model,
    instructions: $instructions,
    input: [
      { type: "message", role: "user",
        content: [ { type: "input_text", text: $text } ] }
    ],
    tools: [],
    tool_choice: "auto",
    parallel_tool_calls: false,
    reasoning: { effort: "minimal", summary: "auto" },
    store: false,
    stream: true,
    include: ["reasoning.encrypted_content"]
}')"

curl -sS -N https://chatgpt.com/backend-api/codex/responses \
-X POST \
-H "Authorization: Bearer $CODEXCLI_ACCESS_TOKEN" \
-H "chatgpt-account-id: $CODEXCLI_ACCOUNT_ID" \
-H "OpenAI-Beta: responses=experimental" \
-H "Content-Type: application/json" \
-H "Accept: text/event-stream" \
-H "originator: codex_cli_rs" \
-H "User-Agent: codex_cli_rs" \
-H "session_id: $CODEXCLI_SESSION_ID" \
-d "$CODEXCLI_DATA" | awk '/^event: response.output_text.delta$/ { want=1; next } \
       /^event: response\.output_text\.done$/  { print "{\"__eol__\":true}"; fflush(); next } \
       want && /^data: / { sub(/^data: /,""); print; fflush(); want=0; next }' \
| jq -r --unbuffered 'if .delta? then .delta elif .eol? then "EOL" else empty end' \
| awk '{ if ($0=="EOL") { print ""; fflush(); } else { printf "%s", $0; fflush(); } }'
